"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compare = exports.decrypt = exports.encrypt = void 0;
var hashFun_1 = require("./hashFun");
var configNum = function (num, i) {
    return parseInt(num.toString().charAt(i % num.toString().length));
};
var encrypta = function (st, salt, d) {
    if (d === void 0) { d = 1; }
    var hashSalt = (0, hashFun_1.hashFun)(salt.trim());
    return st
        .split('')
        .map(function (c, i) {
        return String.fromCharCode(c.charCodeAt(0) + configNum(hashSalt, i) * d);
    })
        .join('');
};
var encrypt = function (param, salt, d) {
    if (d === void 0) { d = 1; }
    var hashSalt = (0, hashFun_1.hashFun)(salt.trim());
    return JSON.stringify(param)
        .split('')
        .map(function (c, i) {
        return String.fromCharCode(c.charCodeAt(0) + configNum(hashSalt, i) * d);
    })
        .join('')
        .replace(/\\/g, 'blacard')
        .replace(/\//g, 'danger')
        .replace(/"/g, 'killer')
        .replace(/'/g, 'terror')
        .replace(/ /g, 'blankart')
        .replace(/{/g, 'alpha')
        .replace(/}/g, 'mega')
        .replace(/`/g, 'omega');
};
exports.encrypt = encrypt;
var decrypt = function (str, salt) {
    var encryption = encrypta(str
        .replace(/blacard/g, '\\')
        .replace(/danger/g, '/')
        .replace(/killer/g, '"')
        .replace(/terror/g, "'")
        .replace(/blankart/g, ' ')
        .replace(/alpha/g, '{')
        .replace(/mega/g, '}')
        .replace(/omega/g, '`'), salt.trim(), -1);
    try {
        return JSON.parse(encryption);
    }
    catch (error) {
        return encryption;
    }
};
exports.decrypt = decrypt;
var compare = function (string, hash, salt) {
    return (0, exports.decrypt)(hash, salt.trim()) === string;
};
exports.compare = compare;
exports.default = { encrypt: exports.encrypt, decrypt: exports.decrypt, compare: exports.compare };
